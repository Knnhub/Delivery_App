// üéØ ‡πÑ‡∏ü‡∏•‡πå: lib/pages/profile_page.dart (‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)

import 'dart:io'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö File
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'dart:developer';
import 'package:image_picker/image_picker.dart'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ
import 'package:http/http.dart' as http; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ Cloudinary)
import 'dart:convert'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö jsonDecode

class ProfilePage extends StatefulWidget {
  final String? currentUserPhone;
  final bool isRider;
  const ProfilePage({super.key, this.currentUserPhone, this.isRider = false});

  @override
  State<ProfilePage> createState() => _ProfilePageState();
}

class _ProfilePageState extends State<ProfilePage> {
  bool _isLoading = true;
  Map<String, dynamic>? _userData;
  var db = FirebaseFirestore.instance;

  // --- ‚ú® State Variables ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
  bool _isEditing = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  bool _isSaving = false; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  final _formKey = GlobalKey<FormState>(); // Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Form

  // Controllers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö TextFields
  late TextEditingController _nameController;
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Controllers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ)
  late TextEditingController _licensePlateController;

  final ImagePicker _picker = ImagePicker(); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  XFile? _newProfileImageFile; // ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  XFile? _newVehicleImageFile; // ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rider)

  String?
  _dataOriginCollection; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ collection ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤ ('user' or 'rider')
  // --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô State Variables ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ---

  @override
  void initState() {
    super.initState();
    log('[ProfilePage] Received currentUserPhone: ${widget.currentUserPhone}');
    // Initialize controllers (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Œ±œÅœáŒπŒ∫Œ¨)
    _nameController = TextEditingController();
    _licensePlateController = TextEditingController();
    _fetchUserData();
  }

  // ‚ú® ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏° dispose controllers ‚ú®
  @override
  void dispose() {
    _nameController.dispose();
    _licensePlateController.dispose();
    super.dispose();
  }

  Future<void> _fetchUserData() async {
    // ... (‡πÇ‡∏Ñ‡πâ‡∏î _fetchUserData ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ 2 collections ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    final phone = widget.currentUserPhone;
    log('[ProfilePage] Fetching data for phone: $phone');
    if (phone == null || phone.isEmpty) {
      /*...*/
    }

    DocumentSnapshot? doc;
    String? foundInCollection; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ collection ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
    try {
      log('[ProfilePage] Trying to fetch from collection: user');
      doc = await db.collection('user').doc(phone).get();
      if (doc.exists) foundInCollection = 'user'; // <--- ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ collection

      if (!doc.exists) {
        log('[ProfilePage] Not found in "user". Trying collection: rider');
        doc = await db.collection('rider').doc(phone).get();
        if (doc.exists) foundInCollection = 'rider'; // <--- ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠ collection
      }

      if (doc.exists && foundInCollection != null) {
        log('[ProfilePage] User data found in collection: $foundInCollection');
        final fetchedData = doc.data() as Map<String, dynamic>?;
        if (mounted) {
          setState(() {
            _userData = fetchedData;
            _dataOriginCollection =
                foundInCollection; // <-- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å collection ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            // ‚ú® ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ Controllers ‚ú®
            _nameController.text = _userData?['name'] ?? '';
            _licensePlateController.text =
                _userData?['vehicleLicensePlate'] ?? '';
            _isLoading = false;
          });
        }
      } else {
        /* ... ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ... */
      }
    } catch (e) {
      /* ... Error handling ... */
    }
    // finally { // ‡∏¢‡πâ‡∏≤‡∏¢ setState isLoading ‡πÑ‡∏õ‡πÉ‡∏ô try/catch ‡πÅ‡∏•‡πâ‡∏ß
    //   if (mounted) setState(() => _isLoading = false);
    // }
  }

  // --- ‚ú® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ú® ---

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
  Future<void> _pickProfileImage() async {
    final XFile? pickedFile = await _picker.pickImage(
      source: ImageSource.gallery,
    );
    if (pickedFile != null && mounted) {
      setState(() {
        _newProfileImageFile = pickedFile;
      });
    }
  }

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Rider)
  Future<void> _pickVehicleImage() async {
    final XFile? pickedFile = await _picker.pickImage(
      source: ImageSource.gallery,
    );
    if (pickedFile != null && mounted) {
      setState(() {
        _newVehicleImageFile = pickedFile;
      });
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Cloudinary - ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö cloudName, uploadPreset)
  Future<String?> _uploadImage(XFile imageFile, String folderName) async {
    // **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Cloudinary
    // ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ Firebase Storage ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
    // ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á package `firebase_storage`
    // ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: https://firebase.google.com/docs/storage/flutter/upload-files

    setState(() => _isSaving = true); // ‡πÅ‡∏™‡∏î‡∏á loading ‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    try {
      const cloudName = 'drskwb4o3'; // <-- ‡πÉ‡∏™‡πà Cloud Name ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      const uploadPreset = 'images'; // <-- ‡πÉ‡∏™‡πà Upload Preset ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
      final publicId =
          '$folderName/${DateTime.now().millisecondsSinceEpoch}_${imageFile.name}';
      final url = Uri.parse(
        'https://api.cloudinary.com/v1_1/$cloudName/image/upload',
      );

      final req = http.MultipartRequest('POST', url)
        ..fields['upload_preset'] = uploadPreset
        ..fields['folder'] = folderName
        ..fields['public_id'] = publicId
        ..files.add(await http.MultipartFile.fromPath('file', imageFile.path));

      final res = await req.send();
      final body = await res.stream.bytesToString();

      if (res.statusCode == 200) {
        final json = jsonDecode(body) as Map<String, dynamic>;
        log('[$folderName Image Upload Success]: ${json['secure_url']}');
        return json['secure_url'] as String?;
      } else {
        log(
          '[$folderName Image Upload Failed]: Status ${res.statusCode}, Body: $body',
        );
        throw Exception('Upload failed');
      }
    } catch (e) {
      log('Error uploading $folderName image: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ $folderName ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e')),
        );
      }
      return null;
    } finally {
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setState isSaving ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏ó‡∏≥‡∏ï‡∏≠‡∏ô‡∏à‡∏ö _saveChanges
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  Future<void> _saveChanges() async {
    if (!_formKey.currentState!.validate()) {
      return; // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Form ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡πà‡∏≠
    }
    if (_dataOriginCollection == null || widget.currentUserPhone == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏ collection ‡∏´‡∏£‡∏∑‡∏≠ ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'),
        ),
      );
      return;
    }

    setState(() => _isSaving = true);

    String? newProfilePicUrl;
    String? newVehiclePicUrl;
    Map<String, dynamic> updateData = {};

    try {
      // 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
      if (_newProfileImageFile != null) {
        newProfilePicUrl = await _uploadImage(
          _newProfileImageFile!,
          'profile_pics',
        );
        if (newProfilePicUrl != null) {
          updateData['profilePicURL'] =
              newProfilePicUrl; // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ field ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        } else {
          throw Exception(
            'Failed to upload profile picture.',
          ); // ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        }
      }
      // 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô Rider)
      if (widget.isRider && _newVehicleImageFile != null) {
        newVehiclePicUrl = await _uploadImage(
          _newVehicleImageFile!,
          'vehicle_pics',
        );
        if (newVehiclePicUrl != null) {
          updateData['vehiclePicUrl'] =
              newVehiclePicUrl; // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ field ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        } else {
          throw Exception(
            'Failed to upload vehicle picture.',
          ); // ‡∏´‡∏¢‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏£‡∏ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        }
      }

      // 3. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å TextFields (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
      if (_nameController.text != (_userData?['name'] ?? '')) {
        updateData['name'] = _nameController.text.trim();
      }
      if (widget.isRider &&
          _licensePlateController.text !=
              (_userData?['vehicleLicensePlate'] ?? '')) {
        updateData['vehicleLicensePlate'] = _licensePlateController.text.trim();
      }
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

      // 4. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Firestore .update()
      if (updateData.isNotEmpty) {
        log(
          '[ProfilePage] Updating Firestore in $_dataOriginCollection / ${widget.currentUserPhone} with data: $updateData',
        );
        await db
            .collection(_dataOriginCollection!)
            .doc(widget.currentUserPhone!)
            .update(updateData);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô State ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ UI ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
        if (mounted) {
          setState(() {
            _userData?.addAll(updateData); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô _userData
            _newProfileImageFile = null; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            _newVehicleImageFile = null;
          });
        }
        if (mounted)
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')),
          );
      } else {
        if (mounted)
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á')),
          );
      }

      // 5. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      if (mounted) setState(() => _isEditing = false);
    } catch (e) {
      log('[ProfilePage] Error saving changes: $e');
      if (mounted)
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: $e')),
        );
    } finally {
      if (mounted) setState(() => _isSaving = false);
    }
  }

  // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  void _cancelEdit() {
    setState(() {
      _isEditing = false;
      // Reset controllers ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
      _nameController.text = _userData?['name'] ?? '';
      _licensePlateController.text = _userData?['vehicleLicensePlate'] ?? '';
      _newProfileImageFile = null; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      _newVehicleImageFile = null;
    });
  }
  // --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---

  void _logout() {
    Navigator.of(context, rootNavigator: true).pushReplacementNamed('/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_isEditing ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå' : '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå'),
        automaticallyImplyLeading: false,
        // ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Edit/Save/Cancel ‡πÉ‡∏ô AppBar ‚ú®
        actions: _isLoading
            ? []
            : [
                // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏ì‡∏∞‡πÇ‡∏´‡∏•‡∏î
                if (_isEditing)
                  // ‡∏õ‡∏∏‡πà‡∏° Cancel
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: _isSaving
                        ? null
                        : _cancelEdit, // ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                    tooltip: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
                  ),
                // ‡∏õ‡∏∏‡πà‡∏° Edit ‡∏´‡∏£‡∏∑‡∏≠ Save
                IconButton(
                  icon: Icon(_isEditing ? Icons.save : Icons.edit),
                  onPressed: _isSaving
                      ? null
                      : (_isEditing
                            ? _saveChanges
                            : () => setState(
                                () => _isEditing = true,
                              )), // ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                  tooltip: _isEditing ? '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' : '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
                ),
              ],
      ),
      // ‚ú® ‡πÅ‡∏™‡∏î‡∏á Loading indicator ‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‚ú®
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _isSaving
          ? const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  SizedBox(height: 10),
                  Text("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..."),
                ],
              ),
            )
          : _userData == null
          ? const Center(child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'))
          : _buildProfileView(), // ‡πÉ‡∏ä‡πâ View ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏° _isEditing
    );
  }

  // ‚ú® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç _buildProfileView ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ú®
  Widget _buildProfileView() {
    final profileImageUrl = _userData?['profilePicURL'] as String?;
    final addresses = (_userData?['addresses'] as List<dynamic>? ?? []);
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rider ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ)
    final vehicleLicensePlate = _userData?['vehicleLicensePlate'] as String?;
    final vehiclePicUrl = _userData?['vehiclePicUrl'] as String?;

    log(
      '[ProfilePage] Addresses data from Firestore: $addresses',
    ); // Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤
    log('[ProfilePage] addresses.isEmpty: ${addresses.isEmpty}');

    return Form(
      // ‚ú® ‡∏´‡∏∏‡πâ‡∏°‡∏î‡πâ‡∏ß‡∏¢ Form ‚ú®
      key: _formKey,
      child: ListView(
        padding: const EdgeInsets.all(24.0),
        children: [
          // --- ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
          Center(
            child: Stack(
              alignment: Alignment.bottomRight,
              children: [
                CircleAvatar(
                  radius: 60,
                  backgroundColor: Colors.grey.shade300,
                  // ‚ú® ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏° ‚ú®
                  backgroundImage: _newProfileImageFile != null
                      ? FileImage(File(_newProfileImageFile!.path))
                      : (profileImageUrl != null && profileImageUrl.isNotEmpty)
                      ? NetworkImage(profileImageUrl)
                      : null as ImageProvider?, // Cast to ImageProvider?
                  child:
                      (_newProfileImageFile == null &&
                          (profileImageUrl == null || profileImageUrl.isEmpty))
                      ? const Icon(Icons.person, size: 60, color: Colors.white)
                      : null,
                ),
                // ‚ú® ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ _isEditing) ‚ú®
                if (_isEditing)
                  Positioned(
                    right: 0,
                    bottom: 0,
                    child: CircleAvatar(
                      radius: 20,
                      backgroundColor: Theme.of(context).primaryColor,
                      child: IconButton(
                        icon: const Icon(
                          Icons.camera_alt,
                          color: Colors.white,
                          size: 20,
                        ),
                        onPressed: _pickProfileImage,
                        tooltip: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
                      ),
                    ),
                  ),
              ],
            ),
          ),
          const SizedBox(height: 24),

          // --- ‡∏ä‡∏∑‡πà‡∏≠ (‡πÅ‡∏™‡∏î‡∏á Text ‡∏´‡∏£‡∏∑‡∏≠ TextFormField) ---
          Card(
            child: ListTile(
              leading: const Icon(Icons.person_outline),
              title: const Text('‡∏ä‡∏∑‡πà‡∏≠'),
              subtitle: _isEditing
                  ? TextFormField(
                      // ‚ú® ‡πÉ‡∏ä‡πâ TextFormField ‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ú®
                      controller: _nameController,
                      decoration: const InputDecoration(hintText: '‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠'),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠';
                        }
                        return null;
                      },
                    )
                  : Text(
                      // ‡πÅ‡∏™‡∏î‡∏á Text ‡∏õ‡∏Å‡∏ï‡∏¥
                      _userData?['name'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
            ),
          ),
          const SizedBox(height: 12),

          // --- ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç) ---
          Card(
            child: ListTile(
              leading: const Icon(Icons.phone_outlined),
              title: const Text('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå'),
              subtitle: Text(
                widget.currentUserPhone ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
          const SizedBox(height: 12),

          // --- Role (‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ---
          Card(
            child: ListTile(
              leading: const Icon(Icons.verified_user_outlined),
              title: const Text('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
              subtitle: Text(
                _userData?['role'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),

          // --- ‚ú® ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rider (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£) ‚ú® ---
          if (widget.isRider || _userData?['role'] == 'rider') ...[
            const SizedBox(height: 12),
            const Divider(),
            const SizedBox(height: 12),
            Text(
              '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Rider',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            // ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ
            Card(
              child: ListTile(
                leading: const Icon(Icons.badge_outlined),
                title: const Text('‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ'),
                subtitle: _isEditing
                    ? TextFormField(
                        // ‚ú® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ ‚ú®
                        controller: _licensePlateController,
                        decoration: const InputDecoration(
                          hintText: '‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ',
                        ),
                        // validator: ... (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                      )
                    : Text(
                        // ‡πÅ‡∏™‡∏î‡∏á Text ‡∏õ‡∏Å‡∏ï‡∏¥
                        vehicleLicensePlate ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
              ),
            ),
            const SizedBox(height: 12),
            // ‡∏£‡∏π‡∏õ‡∏£‡∏ñ
            Text('‡∏£‡∏π‡∏õ‡∏¢‡∏≤‡∏ô‡∏û‡∏≤‡∏´‡∏ô‡∏∞', style: Theme.of(context).textTheme.bodySmall),
            const SizedBox(height: 4),
            Container(
              height: 150,
              width: double.infinity,
              decoration: BoxDecoration(
                color: Colors.grey.shade200,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey.shade300),
                image: DecorationImage(
                  // ‚ú® ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ‡∏£‡∏ñ‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏° ‚ú®
                  image: _newVehicleImageFile != null
                      ? FileImage(File(_newVehicleImageFile!.path))
                      : (vehiclePicUrl != null && vehiclePicUrl.isNotEmpty)
                      ? NetworkImage(vehiclePicUrl)
                      : const AssetImage('assets/images/placeholder.png')
                            as ImageProvider, // ‡πÉ‡∏™‡πà Placeholder ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ
                  fit: BoxFit.cover,
                  onError: (exception, stackTrace) {
                    /* ‡πÅ‡∏™‡∏î‡∏á placeholder ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î NetworkImage ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ */
                  },
                ),
              ),
              // ‚ú® ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡∏£‡∏ñ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ _isEditing) ‚ú®
              child: _isEditing
                  ? Align(
                      alignment: Alignment.bottomRight,
                      child: Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: ElevatedButton.icon(
                          icon: const Icon(Icons.camera_alt, size: 16),
                          label: const Text('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ'),
                          onPressed: _pickVehicleImage,
                          style: ElevatedButton.styleFrom(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 10,
                              vertical: 5,
                            ),
                            textStyle: const TextStyle(fontSize: 12),
                          ),
                        ),
                      ),
                    )
                  : null,
            ),
            const SizedBox(height: 24),
            const Divider(),
            const SizedBox(height: 12),
          ],

          // --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß) ---
          Text(
            '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ',
            style: Theme.of(context).textTheme.titleMedium,
          ),
          const SizedBox(height: 8),
          if (addresses.isEmpty)
            const Text('‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ')
          else
            // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á Card ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
            ...addresses.map((addr) {
              // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Type ‡∏Å‡πà‡∏≠‡∏ô Cast ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
              if (addr is Map<String, dynamic>) {
                final addressMap = addr; // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á Cast ‡∏ã‡πâ‡∏≥
                return Card(
                  margin: const EdgeInsets.only(bottom: 8),
                  child: ListTile(
                    leading: const Icon(Icons.home_outlined),
                    title: Text(
                      addressMap['address'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',
                      style: const TextStyle(fontSize: 16),
                    ),
                    // Optional: ‡πÄ‡∏û‡∏¥‡πà‡∏° onTap ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
                    // onTap: _isEditing ? () { /* ... handle edit/delete ... */ } : null,
                    // trailing: _isEditing ? IconButton(icon: Icon(Icons.delete_outline, color: Colors.red), onPressed: () {/*...*/}) : null,
                  ),
                );
              } else {
                // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Array ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Map ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Widget ‡∏ß‡πà‡∏≤‡∏á‡πÜ ‡∏´‡∏£‡∏∑‡∏≠ log error
                log(
                  '[ProfilePage] Invalid data type in addresses array: $addr',
                );
                return const SizedBox.shrink(); // ‡πÅ‡∏™‡∏î‡∏á Widget ‡∏ß‡πà‡∏≤‡∏á‡πÜ
              }
            }).toList(),

          // --- ‡∏õ‡∏∏‡πà‡∏° Logout ---
          const SizedBox(height: 48),
          // ‚ú® ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Logout ‡∏ï‡∏≠‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‚ú®
          if (!_isEditing)
            ElevatedButton.icon(
              onPressed: _logout,
              icon: const Icon(Icons.logout),
              label: const Text('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö'),
              style: ElevatedButton.styleFrom(/* ... */),
            ),
        ],
      ),
    );
  }
}
