// üéØ ‡πÑ‡∏ü‡∏•‡πå: lib/pages/sendpage.dart (‡∏â‡∏ö‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)

import 'dart:convert';
import 'dart:developer';
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:image_picker/image_picker.dart';

class SendPage extends StatefulWidget {
  final String? senderPhone;
  const SendPage({super.key, this.senderPhone});

  @override
  State<SendPage> createState() => _SendPageState();
}

class _SendPageState extends State<SendPage> {
  static const String USER_COLLECTION =
      'user'; // ‚ú® UPDATE: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
  final _formKey = GlobalKey<FormState>();
  var db = FirebaseFirestore.instance;
  static const String RECEIVER_COLLECTION = 'user';

  // ‚ú® UPDATE: ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á (Sender)
  bool _loadingSender = true;
  Map<String, dynamic>? _senderDoc;
  List<Map<String, dynamic>> _senderAddresses = [];
  Map<String, dynamic>? _selectedSenderAddress;

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (Receiver)
  final _receiverPhoneCtl = TextEditingController();
  bool _loadingReceiver = false;
  Map<String, dynamic>? _receiverDoc;
  List<Map<String, dynamic>> _receiverAddresses = [];
  Map<String, dynamic>? _selectedReceiverAddress;

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  final List<_ItemRow> _items = [_ItemRow()];
  bool _submitting = false;

  final ImagePicker _picker = ImagePicker();

  @override
  void initState() {
    super.initState();
    // ‚ú® UPDATE: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
    _fetchSenderData();
  }

  // ‚ú® UPDATE: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ log ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
  Future<void> _fetchSenderData() async {
    log('--- üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á ---');
    final phone = widget.senderPhone;
    log('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: $phone');

    if (phone == null || phone.isEmpty) {
      log('‚ö†Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á');
      setState(() => _loadingSender = false);
      return;
    }

    try {
      // ‡πÉ‡∏ä‡πâ db.collection(...).doc(phone).get() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      DocumentSnapshot doc = await db
          .collection(USER_COLLECTION)
          .doc(phone)
          .get();

      if (doc.exists) {
        log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á!');
        final data = doc.data() as Map<String, dynamic>;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (addresses) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Array
        final addrs = (data['addresses'] as List<dynamic>? ?? [])
            .map((e) => Map<String, dynamic>.from(e as Map))
            .toList();

        // ‚ú® LOG: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Console ‚ú®
        log('üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö: $addrs');

        setState(() {
          _senderDoc = data..['phone'] = phone;
          _senderAddresses = addrs;
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
          if (_senderAddresses.isNotEmpty) {
            _selectedSenderAddress = _senderAddresses.first;
          }
        });
      } else {
        log('‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå: $phone');
      }
    } catch (e) {
      log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e');
    } finally {
      setState(() => _loadingSender = false);
      log('--- üèÅ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á ---');
    }
  }

  void _resetForm() {
    setState(() {
      _receiverPhoneCtl.clear();
      _receiverDoc = null;
      _receiverAddresses = [];
      _selectedReceiverAddress = null;
      _items.clear();
      _items.add(_ItemRow());
      _submitting = false;
    });
  }

  @override
  void dispose() {
    _receiverPhoneCtl.dispose();
    super.dispose();
  }

  Future<void> _searchReceiverByPhone() async {
    final phone = _receiverPhoneCtl.text.trim();
    if (phone.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö')),
      );
      return;
    }
    setState(() => _loadingReceiver = true);
    try {
      final doc = await FirebaseFirestore.instance
          .collection(RECEIVER_COLLECTION)
          .doc(phone)
          .get();
      if (!doc.exists) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç $phone')));
        return;
      }
      final data = doc.data()!;
      final addrs = (data['addresses'] as List<dynamic>? ?? [])
          .map((e) => Map<String, dynamic>.from(e as Map))
          .toList();
      setState(() {
        _receiverDoc = data..['phone'] = phone;
        _receiverAddresses = addrs;
        if (_receiverAddresses.isNotEmpty) {
          _selectedReceiverAddress = _receiverAddresses.first;
        }
      });
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e')));
    } finally {
      if (mounted) setState(() => _loadingReceiver = false);
    }
  }

  void _addItemRow() => setState(() => _items.add(_ItemRow()));
  void _removeItemRow(int index) {
    if (_items.length > 1) {
      setState(() => _items.removeAt(index));
    }
  }

  Future<String?> _uploadItemImage(XFile imageFile) async {
    try {
      const cloudName = 'drskwb4o3';
      const uploadPreset = 'images';
      const folder = 'deliveries';

      final publicId =
          '${folder}/${DateTime.now().millisecondsSinceEpoch}_${imageFile.name}';
      final url = Uri.parse(
        'https://api.cloudinary.com/v1_1/$cloudName/image/upload',
      );

      final req = http.MultipartRequest('POST', url)
        ..fields['upload_preset'] = uploadPreset
        ..fields['folder'] = folder
        ..fields['public_id'] = publicId
        ..files.add(await http.MultipartFile.fromPath('file', imageFile.path));

      final res = await req.send();
      final body = await res.stream.bytesToString();

      if (res.statusCode == 200) {
        final json = jsonDecode(body) as Map<String, dynamic>;
        return json['secure_url'] as String?;
      } else {
        throw Exception('Upload failed with status ${res.statusCode}: $body');
      }
    } catch (e) {
      if (!mounted) return null;
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e')));
      return null;
    }
  }

  Future<void> _submit() async {
    final senderPhone = widget.senderPhone;
    if (senderPhone == null || senderPhone.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á (‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á)'),
        ),
      );
      return;
    }

    // ‚ú® UPDATE: 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (_selectedSenderAddress == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á)')),
      );
      return;
    }

    if (_receiverDoc == null || _selectedReceiverAddress == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')),
      );
      return;
    }

    final validItems = _items
        .where((item) => item.name.trim().isNotEmpty)
        .toList();
    if (validItems.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')),
      );
      return;
    }

    setState(() => _submitting = true);

    try {
      List<Map<String, dynamic>> itemsForPayload = [];
      for (final item in validItems) {
        String? imageUrl;
        if (item.pickedImage != null) {
          imageUrl = await _uploadItemImage(item.pickedImage!);
        }
        itemsForPayload.add({
          'name': item.name.trim(),
          'qty': item.qty,
          'weight': item.weight,
          'note': item.note?.trim(),
          'imageUrl': imageUrl,
        });
      }

      // ‚ú® UPDATE: 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
      final senderName = (_senderDoc?['name'] as String?) ?? '';
      final senderAddrData = _selectedSenderAddress!;
      final senderAddr = {
        'address': senderAddrData['address'] ?? '',
        'lat': (senderAddrData['lat'] as num?)?.toDouble(),
        'lng': (senderAddrData['lng'] as num?)?.toDouble(),
      };

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      final receiverPhone = _receiverDoc!['phone'] as String;
      final receiverName = (_receiverDoc!['name'] ?? '') as String? ?? '';
      final receiverAddrData = _selectedReceiverAddress!;
      final receiverAddr = {
        'address': receiverAddrData['address'] ?? '',
        'lat': (receiverAddrData['lat'] as num?)?.toDouble(),
        'lng': (receiverAddrData['lng'] as num?)?.toDouble(),
      };

      // ‚ú® UPDATE: 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° senderAddress ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô payload ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      final payload = {
        'senderId': senderPhone,
        'senderName': senderName,
        'senderAddress': senderAddr, // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° field ‡∏ô‡∏µ‡πâ
        'receiverId': receiverPhone,
        'receiverName': receiverName,
        'receiverPhone': receiverPhone,
        'receiverAddress': receiverAddr,
        'items': itemsForPayload,
        'status': 'created',
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      };

      await db.collection('deliveries').add(payload);

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
      );
      _resetForm();
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $e')));
    } finally {
      if (mounted) setState(() => _submitting = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final addrHint = _selectedReceiverAddress == null
        ? '‚Äî'
        : '${_selectedReceiverAddress?['address'] ?? ''}'
              '${_selectedReceiverAddress?['lat'] != null ? '\n(${_selectedReceiverAddress?['lat']}, ${_selectedReceiverAddress?['lng']})' : ''}';
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏'),
        actions: [
          if (widget.senderPhone != null)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 12),
              child: Center(child: Text(widget.senderPhone!)),
            ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            Text('‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö', style: Theme.of(context).textTheme.titleMedium),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _receiverPhoneCtl,
                    keyboardType: TextInputType.phone,
                    decoration: const InputDecoration(
                      hintText: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
                      border: OutlineInputBorder(),
                      contentPadding: EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 12,
                      ),
                    ),
                  ),
                ),
                const SizedBox(width: 8),
                ElevatedButton.icon(
                  onPressed: _loadingReceiver ? null : _searchReceiverByPhone,
                  icon: _loadingReceiver
                      ? const SizedBox(
                          width: 16,
                          height: 16,
                          child: CircularProgressIndicator(strokeWidth: 2),
                        )
                      : const Icon(Icons.search),
                  label: const Text('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'),
                ),
              ],
            ),
            const SizedBox(height: 12),
            if (_receiverDoc != null) ...[
              Card(
                child: ListTile(
                  leading: const Icon(Icons.person),
                  title: Text(_receiverDoc?['name'] ?? '(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠)'),
                  subtitle: Text(_receiverDoc?['phone'] ?? ''),
                ),
              ),
              const SizedBox(height: 8),
              DropdownButtonFormField<Map<String, dynamic>>(
                value: _selectedReceiverAddress,
                items: _receiverAddresses.map((m) {
                  final label = (m['address'] ?? '') as String? ?? '';
                  return DropdownMenuItem(
                    value: m,
                    child: Text(
                      label.isEmpty ? '(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà)' : label,
                      overflow: TextOverflow.ellipsis,
                    ),
                  );
                }).toList(),
                onChanged: (v) => setState(() => _selectedReceiverAddress = v),
                decoration: const InputDecoration(
                  labelText: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö',
                  border: OutlineInputBorder(),
                  contentPadding: EdgeInsets.symmetric(
                    horizontal: 12,
                    vertical: 12,
                  ),
                ),
              ),
              const SizedBox(height: 8),
              Text(addrHint, style: const TextStyle(color: Colors.black54)),
              const SizedBox(height: 16),
            ],
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                  style: Theme.of(context).textTheme.titleMedium,
                ),
                TextButton.icon(
                  onPressed: _addItemRow,
                  icon: const Icon(Icons.add),
                  label: const Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'),
                ),
              ],
            ),
            const SizedBox(height: 8),
            ...List.generate(_items.length, (index) {
              final item = _items[index];
              return Padding(
                key: ValueKey(item.id),
                padding: const EdgeInsets.only(bottom: 12),
                child: _ItemCard(
                  item: item,
                  picker: _picker,
                  onRemove: _items.length > 1
                      ? () => _removeItemRow(index)
                      : null,
                ),
              );
            }),
            const SizedBox(height: 16),
            SizedBox(
              height: 52,
              child: ElevatedButton.icon(
                onPressed: _submitting ? null : _submit,
                icon: _submitting
                    ? const SizedBox(
                        width: 18,
                        height: 18,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      )
                    : const Icon(Icons.check_circle),
                label: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡πà‡∏á‡∏û‡∏±‡∏™‡∏î‡∏∏'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _ItemRow {
  _ItemRow();
  final String id = UniqueKey().toString();
  String name = '';
  int qty = 1;
  double? weight;
  String? note;
  XFile? pickedImage;
}

class _ItemCard extends StatefulWidget {
  const _ItemCard({
    required this.item,
    required this.picker,
    this.onRemove,
    super.key,
  });

  final _ItemRow item;
  final ImagePicker picker;
  final VoidCallback? onRemove;

  @override
  State<_ItemCard> createState() => _ItemCardState();
}

class _ItemCardState extends State<_ItemCard> {
  final _nameCtl = TextEditingController();
  final _qtyCtl = TextEditingController(text: '1');
  final _weightCtl = TextEditingController();
  final _noteCtl = TextEditingController();

  XFile? _pickedImage;

  @override
  void initState() {
    super.initState();
    _nameCtl.text = widget.item.name;
    _qtyCtl.text = widget.item.qty.toString();
    _weightCtl.text = widget.item.weight?.toString() ?? '';
    _noteCtl.text = widget.item.note ?? '';
    _pickedImage = widget.item.pickedImage;
  }

  @override
  void dispose() {
    _nameCtl.dispose();
    _qtyCtl.dispose();
    _weightCtl.dispose();
    _noteCtl.dispose();
    super.dispose();
  }

  void _sync() {
    widget.item
      ..name = _nameCtl.text
      ..qty = int.tryParse(_qtyCtl.text) ?? 1
      ..weight = double.tryParse(_weightCtl.text)
      ..note = _noteCtl.text.isNotEmpty ? _noteCtl.text : null
      ..pickedImage = _pickedImage;
  }

  Future<void> _pickImage() async {
    final file = await widget.picker.pickImage(
      source: ImageSource.gallery,
      imageQuality: 80,
      maxWidth: 1024,
    );
    if (file != null) {
      setState(() {
        _pickedImage = file;
        _sync();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            if (_pickedImage != null)
              Padding(
                padding: const EdgeInsets.only(bottom: 12),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(8),
                  child: Image.file(
                    File(_pickedImage!.path),
                    height: 150,
                    width: double.infinity,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
            ElevatedButton.icon(
              onPressed: _pickImage,
              icon: const Icon(Icons.add_photo_alternate_outlined),
              label: Text(
                _pickedImage == null ? '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏û‡∏±‡∏™‡∏î‡∏∏' : '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ',
              ),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _nameCtl,
              decoration: const InputDecoration(
                labelText: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                border: OutlineInputBorder(),
              ),
              onChanged: (_) => _sync(),
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _qtyCtl,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      labelText: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
                      border: OutlineInputBorder(),
                    ),
                    onChanged: (_) => _sync(),
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: TextField(
                    controller: _weightCtl,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      labelText: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)',
                      border: OutlineInputBorder(),
                    ),
                    onChanged: (_) => _sync(),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            TextField(
              controller: _noteCtl,
              decoration: const InputDecoration(
                labelText: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                border: OutlineInputBorder(),
              ),
              onChanged: (_) => _sync(),
            ),
            if (widget.onRemove != null)
              Align(
                alignment: Alignment.centerRight,
                child: TextButton.icon(
                  style: TextButton.styleFrom(foregroundColor: Colors.red),
                  onPressed: widget.onRemove,
                  icon: const Icon(Icons.delete_outline),
                  label: const Text('‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ'),
                ),
              ),
          ],
        ),
      ),
    );
  }
}
